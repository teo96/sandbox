// ==UserScript==
// @id             iitc-plugin-portals-list@teo96
// @name           teo96: show list of portals
// @version        0.0.1
// @namespace      https://github.com/breunigs/ingress-intel-total-conversion
// @updateURL      
// @downloadURL    
// @description    Display a sortable list of all localized portails with team, level, resonators informations
// @include        https://www.ingress.com/intel*
// @match          https://www.ingress.com/intel*
// ==/UserScript==

function wrapper() {
// ensure plugin framework is there, even if iitc is not yet loaded
if(typeof window.plugin !== 'function') window.plugin = function() {};

// PLUGIN START ////////////////////////////////////////////////////////

// use own namespace for plugin
window.plugin.portalslist = function() {};
    
window.plugin.portalslist.listPortals = []; // structure : name, team, level, resonators = Array, Shields = Array, APgain

window.plugin.portalslist.getPortals = function(){
    
    var retval=false;
   
    //get portals informations from IITC
    $.each(window.portals, function(i, portal) {
        retval=true;
        var d = portal.options.details;   
        var name =  d.portalV2.descriptiveText.TITLE;
        var team = portal.options.team;
        var level = getPortalLevel(d).toString().replace('.', ',');
    
    
        //var player = portal.options.details.captured.capturingPlayerId;
        //get resonators informations
        var resonators = []; // my local resonator array : reso level, reso deployed by, distance to portal, energy total, max 
         
        $.each(portal.options.details.resonatorArray.resonators, function(ind, reso) {
          if(reso) {  
            resonators[ind] = [reso.level, window.getPlayerName(reso.ownerGuid), reso.distanceToPortal, reso.energyTotal, RESO_NRG[reso.level]];
          } else { resonators[ind] = [0,'',0,0,0]; }
        }); 
        // Sort resonators array by resonator level
        resonators.sort(function (a, b) {return b[0] - a[0]});
                       
         //get shield informations 
       	var shields = [];
       	$.each(d.portalV2.linkedModArray, function(ind, mod) {
           if (mod) 
              shields[ind] = mod.rarity.capitalize().replace('_', ' ');
           else
              shields[ind] = ''; 
        });
        
        var APgain= getAttackApGain(d).totalAp;
        //console.log('ligne : ' + i + ' = ' + name + ', ' + team + ', ' + level + ', ' + resonators + ', ' + shields + ', ' + APgain);
        var thisPortal = {'name':name,'team':team,'level':level,'resonators':resonators,'shields':shields,'APgain':APgain};
        //console.log(thisPortal);
        window.plugin.portalslist.listPortals.push(thisPortal);

    });
    return retval;
  }
    
window.plugin.portalslist.displayPL = function() {   
    var html = '';
    if (window.plugin.portalslist.getPortals()) {
         html += window.plugin.portalslist.portalTable();
        console.log('OK');
    } else {
    	console.log('KO');
    };
    alert('<div id="portalslist">' + html + '</div>');
    $(".ui-dialog").addClass('ui-dialog-content');
  
   /* // Setup sorting
   	$(document).on('click', '#players table th', function() {
    	$('#players').html(window.plugin.scoreboard.playerTable($(this).data('sort')));
  	});
    */
 }
    
window.plugin.portalslist.portalTable = function(sortBy) {
  var portals=window.plugin.portalslist.listPortals;
  //console.log(portals);
  var html = '<table>'
    + '<tr><th>Portal</th>' 
    + '<th>Team</th>'
    + '<th>Level</th>'
    + '<th>R1</th>'
    + '<th>R2</th>'
    + '<th>R3</th>'
    + '<th>R4</th>'
    + '<th>R5</th>'
    + '<th>R6</th>'
    + '<th>R7</th>'
    + '<th>R8</th>'
    + '<th>Shield 1</th>'
    + '<th>Shield 2</th>'
    + '<th>Shield 3</th>'
    + '<th>Shield 4</th>'
    + '<th>AP Gain</th></tr>';
  
  $.each(portals, function(ind, portal) {
    html += '<tr class="' + (portal.team === 1 ? 'res' : 'enl') + '">'
    + '<td>' + portal.name + '</td>'
    + '<td>' + portal.team + '</td>'
    + '<td>' + portal.level + '</td>'
    + '<td>' + portal.resonators[0][0] + '</td>'
    + '<td>' + portal.resonators[1][0] + '</td>'
    + '<td>' + portal.resonators[2][0] + '</td>'
    + '<td>' + portal.resonators[3][0] + '</td>'
    + '<td>' + portal.resonators[4][0] + '</td>'
    + '<td>' + portal.resonators[5][0] + '</td>'
    + '<td>' + portal.resonators[6][0] + '</td>'
    + '<td>' + portal.resonators[7][0] + '</td>'
    + '<td>' + portal.shields[0] + '</td>'
    + '<td>' + portal.shields[1] + '</td>'
    + '<td>' + portal.shields[2] + '</td>'
    + '<td>' + portal.shields[3] + '</td>'
    + '<td>' + portal['APgain'] + '</td>';
      
    html+= '</tr>';
 });
 html+='</table>';
 return html;
}
         
var setup =  function() {
  $('body').append('<div id="portalslist" style="display:none;"></div>');
  $('#toolbox').append('<a onclick="window.plugin.portalslist.displayPL()">Portals List</a>');
  $('head').append('<style>' + 
    '.ui-dialog-content {padding: 12px; overflow-y: auto; overflow-x: hidden; max-height: 700px !important; top: 20px !important;left: 20px !important; width: 900px !important;max-width: 1200px !important;}' +
    '#portalslist table {margin-top:10px;	border-collapse: collapse; empty-cells: show; width:100%; clear: both;}' +
    '#portalslist table td, #portalslist table th {border-bottom: 1px solid #0b314e; padding:3px; color:white; background-color:#1b415e}' +
    '#portalslist table tr.res td { background-color: #005684; }' +
    '#portalslist table tr.enl td { background-color: #017f01; }' +
    '#portalslist table tr.L1 td { background-color: #017f01; }' +
   // '#portalslist table tr:nth-child(even) td { opacity: .8 }' +
   // '#portalslist table tr:nth-child(odd) td { color: #ddd !important; }' +
    '#portalslist table th { text-align:left;}' +
    '#portalslist table td.number, #portalslist table th.number { text-align:right }' +
    '#players table th { cursor:pointer; text-align: right;}' +
    '#players table th:nth-child(1) { text-align: left;}' +
    '#portalslist table th.sorted { color:#FFCE00; }' +
    '#portalslist .disclaimer { margin-top:10px; font-size:10px; }' +
    '</style>');
}

// PLUGIN END //////////////////////////////////////////////////////////

if(window.iitcLoaded && typeof setup === 'function') {
  setup();
} else {
  if(window.bootPlugins)
    window.bootPlugins.push(setup);
  else
    window.bootPlugins = [setup];
}
} // wrapper end
// inject code into site context
var script = document.createElement('script');
script.appendChild(document.createTextNode('('+ wrapper +')();'));
(document.body || document.head || document.documentElement).appendChild(script);
